name: Performance Monitoring

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run performance tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  lighthouse-ci:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install dependencies
        run: |
          npm ci
          bundle install

      - name: Build site
        run: npm run build

      - name: Serve site
        run: |
          bundle exec jekyll serve --host 0.0.0.0 --port 4000 --detach
          sleep 5

      - name: Run Lighthouse CI
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true

      - name: Stop Jekyll server
        run: pkill -f jekyll || true

  performance-budgets:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install dependencies
        run: |
          npm ci
          bundle install

      - name: Build site
        run: npm run build

      - name: Analyze bundle size
        run: |
          echo "## Bundle Size Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| Asset Type | Size | Budget | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|------------|------|--------|--------|" >> $GITHUB_STEP_SUMMARY
          
          # Check CSS size
          css_size=$(find _site/assets/css -name "*.css" -exec wc -c {} + | tail -1 | awk '{print $1}')
          css_size_kb=$((css_size / 1024))
          css_status="✅"
          if [ $css_size_kb -gt 50 ]; then
            css_status="❌"
          elif [ $css_size_kb -gt 40 ]; then
            css_status="⚠️"
          fi
          echo "| CSS | ${css_size_kb}KB | 50KB | ${css_status} |" >> $GITHUB_STEP_SUMMARY
          
          # Check JS size
          js_size=$(find _site/assets/js -name "*.js" -exec wc -c {} + | tail -1 | awk '{print $1}')
          js_size_kb=$((js_size / 1024))
          js_status="✅"
          if [ $js_size_kb -gt 300 ]; then
            js_status="❌"
          elif [ $js_size_kb -gt 250 ]; then
            js_status="⚠️"
          fi
          echo "| JavaScript | ${js_size_kb}KB | 300KB | ${js_status} |" >> $GITHUB_STEP_SUMMARY
          
          # Check image payload
          img_size=$(find _site/assets/images -name "*.png" -o -name "*.jpg" -o -name "*.webp" | xargs wc -c | tail -1 | awk '{print $1}')
          img_size_kb=$((img_size / 1024))
          img_status="✅"
          if [ $img_size_kb -gt 1000 ]; then
            img_status="❌"
          elif [ $img_size_kb -gt 800 ]; then
            img_status="⚠️"
          fi
          echo "| Images | ${img_size_kb}KB | 1000KB | ${img_status} |" >> $GITHUB_STEP_SUMMARY
          
          # Set exit code based on budget violations
          if [ $css_size_kb -gt 50 ] || [ $js_size_kb -gt 300 ] || [ $img_size_kb -gt 1000 ]; then
            echo "❌ Performance budget exceeded!"
            exit 1
          else
            echo "✅ All performance budgets met!"
          fi

  seo-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          bundle install

      - name: Build site
        run: npm run build

      - name: Validate SEO implementation
        run: |
          echo "## SEO Validation Results" >> $GITHUB_STEP_SUMMARY
          
          # Check sitemap exists
          if [ -f "_site/sitemap.xml" ]; then
            echo "✅ Sitemap generated" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Sitemap missing" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Check robots.txt exists
          if [ -f "_site/robots.txt" ]; then
            echo "✅ robots.txt present" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ robots.txt missing" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check web manifest exists
          if [ -f "_site/site.webmanifest" ]; then
            echo "✅ Web app manifest present" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Web app manifest missing" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Validate HTML pages contain required meta tags
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Meta Tag Validation" >> $GITHUB_STEP_SUMMARY
          
          for page in _site/index.html _site/apps/*/index.html; do
            if [ -f "$page" ]; then
              page_name=$(basename $(dirname "$page"))
              if [ "$page_name" = "_site" ]; then
                page_name="homepage"
              fi
              
              # Check for required meta tags
              if grep -q 'meta name="description"' "$page" && \
                 grep -q 'meta property="og:title"' "$page" && \
                 grep -q 'application/ld+json' "$page"; then
                echo "✅ $page_name: All required meta tags present" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ $page_name: Missing required meta tags" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
            fi
          done

  pwa-validation:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install dependencies
        run: |
          npm ci
          bundle install

      - name: Build site
        run: npm run build

      - name: Validate PWA implementation
        run: |
          echo "## PWA Validation Results" >> $GITHUB_STEP_SUMMARY
          
          # Check service worker exists
          if [ -f "_site/sw.js" ]; then
            echo "✅ Service worker present" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Service worker missing" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Check offline page exists
          if [ -f "_site/offline.html" ]; then
            echo "✅ Offline page present" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Offline page missing" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Check PWA icons exist
          icon_count=$(find _site/assets/images -name "icon-*.png" | wc -l)
          if [ $icon_count -ge 8 ]; then
            echo "✅ PWA icons present ($icon_count icons)" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Insufficient PWA icons ($icon_count found, need 8+)" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
          
          # Validate manifest JSON
          if command -v jq >/dev/null 2>&1; then
            if jq empty _site/site.webmanifest 2>/dev/null; then
              echo "✅ Web app manifest is valid JSON" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ Web app manifest is invalid JSON" >> $GITHUB_STEP_SUMMARY
              exit 1
            fi
          else
            echo "⚠️ jq not available, skipping manifest JSON validation" >> $GITHUB_STEP_SUMMARY
          fi

  performance-regression:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install dependencies
        run: |
          npm ci
          bundle install

      - name: Build site
        run: npm run build

      - name: Start server for testing
        run: |
          bundle exec jekyll serve --host 0.0.0.0 --port 4000 --detach
          sleep 5

      - name: Run Lighthouse and check for regressions
        uses: treosh/lighthouse-ci-action@v10
        with:
          configPath: '.lighthouserc.json'
          uploadArtifacts: true
          temporaryPublicStorage: true
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Stop Jekyll server
        run: pkill -f jekyll || true

      - name: Comment PR with performance results
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            
            // This would typically read Lighthouse CI results
            // For now, we'll create a basic performance comment
            const comment = `## 🚀 Performance Analysis
            
            Your changes have been analyzed for performance impact:
            
            ### Core Web Vitals
            - **LCP (Largest Contentful Paint)**: Target ≤ 2.5s
            - **FID (First Input Delay)**: Target ≤ 100ms  
            - **CLS (Cumulative Layout Shift)**: Target ≤ 0.1
            
            ### Performance Budgets
            - **CSS Bundle**: Target ≤ 50KB
            - **JavaScript Bundle**: Target ≤ 300KB
            - **Image Payload**: Target ≤ 1000KB
            
            ### PWA Features
            - Service Worker: ✅
            - Web App Manifest: ✅
            - Offline Support: ✅
            
            *This analysis helps ensure we maintain optimal performance for GNOME users.*`;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  daily-performance-report:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'
          bundler-cache: true

      - name: Install dependencies
        run: |
          npm ci
          bundle install

      - name: Build and test site
        run: |
          npm run build
          bundle exec jekyll serve --host 0.0.0.0 --port 4000 --detach
          sleep 5

      - name: Generate daily performance report
        run: |
          echo "# Daily Performance Report - $(date +%Y-%m-%d)" > performance-report.md
          echo "" >> performance-report.md
          echo "## Site Health Check" >> performance-report.md
          
          # Check site accessibility
          if curl -f http://localhost:4000/ > /dev/null 2>&1; then
            echo "✅ Site is accessible" >> performance-report.md
          else
            echo "❌ Site is not accessible" >> performance-report.md
          fi
          
          # Check key pages
          for page in "" "apps/digger/" "apps/sonar/" "offline.html"; do
            if curl -f "http://localhost:4000/${page}" > /dev/null 2>&1; then
              echo "✅ /${page} is accessible" >> performance-report.md
            else
              echo "❌ /${page} is not accessible" >> performance-report.md
            fi
          done
          
          echo "" >> performance-report.md
          echo "## Bundle Sizes" >> performance-report.md
          
          # Report current bundle sizes
          css_size=$(find _site/assets/css -name "*.css" -exec wc -c {} + | tail -1 | awk '{print $1}')
          js_size=$(find _site/assets/js -name "*.js" -exec wc -c {} + | tail -1 | awk '{print $1}')
          img_size=$(find _site/assets/images -name "*.png" -o -name "*.jpg" -o -name "*.webp" | xargs wc -c | tail -1 | awk '{print $1}')
          
          echo "- CSS: $((css_size / 1024))KB" >> performance-report.md
          echo "- JavaScript: $((js_size / 1024))KB" >> performance-report.md  
          echo "- Images: $((img_size / 1024))KB" >> performance-report.md
          
          # Output report as job summary
          cat performance-report.md >> $GITHUB_STEP_SUMMARY

      - name: Stop Jekyll server
        run: pkill -f jekyll || true